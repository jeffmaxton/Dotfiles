call plug#begin('~/.vim/plugged')

" always load
Plug 'Konfekt/FastFold'
Plug 'Raimondi/delimitMate'
Plug 'airblade/vim-rooter'
Plug 'ajh17/VimCompletesMe'
Plug 'chaoren/vim-wordmotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'justinmk/vim-dirvish'
Plug 'matchit.zip'
Plug 'pbrisbin/vim-mkdir'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'wellle/targets.vim'
Plug 'yssl/QFEnter'

" on demand loading
Plug 'christoomey/vim-sort-motion',        { 'on': [ '<Plug>SortMotion', '<Plug>SortMotion', '<Plug>SortLines' ] }
Plug 'duff/vim-scratch',                   { 'on': 'Scratch' }
Plug 'epeli/slimux',                       { 'on': [ 'SlimuxREPL', 'SlimuxREPLSendSelection', 'SlimuxREPLSendBuffer', 'SlimuxREPLSendLine', 'SlimuxREPLSendParagraph', 'SlimuxGlobalConfigure' ] }
Plug 'junegunn/goyo.vim',                  { 'on': 'Goyo' }
Plug 'junegunn/limelight.vim',             { 'on': 'Limelight' }
Plug 'junegunn/vim-easy-align',            { 'on': [ '<Plug>(EasyAlign)', 'EasyAlign' ] }
Plug 'mbbill/undotree',                    { 'on': 'UndotreeToggle' }
Plug 'mhinz/vim-sayonara',                 { 'on': 'Sayonara' }
Plug 'rhysd/clever-f.vim',                 { 'on': '<Plug>(clever-f-' }
Plug 't9md/vim-quickhl',                   { 'on': [ '<Plug>(quickhl-manual-' ] }
Plug 'tpope/vim-commentary',               { 'on': '<Plug>Commentary' }
Plug 'vim-scripts/ReplaceWithRegister',    { 'on': [ '<Plug>ReplaceWithRegisterOperator', '<Plug>ReplaceWithRegisterLine', '<Plug>ReplaceWithRegisterVisual' ] }

" loading based on system and vim version
Plug 'airblade/vim-gitgutter',             { 'on': [] } " only on mac
Plug 'neomake/neomake',                    { 'on': [] } " only in nvim
Plug 'neovim/node-host',                   { 'on': [], 'do': 'npm install' } " only in nvim
Plug 'scrooloose/syntastic',               { 'on': [] } " only in vanilla vim on mac
Plug 'snoe/nvim-parinfer.js',              { 'on': [], 'do': 'lein do npm install, cljsbuild once plugin' } " only in nvim
Plug 'tmux-plugins/vim-tmux-focus-events', { 'on': [] } " only in tmux
Plug 'bfredl/nvim-miniyank',               { 'on': [] } " only in nvim

" filetype based plugins
Plug 'b4winckler/vim-objc',                { 'for': 'objc' }
Plug 'briancollins/vim-jst',               { 'for': 'jst' }
Plug 'cespare/vim-toml',                   { 'for': 'toml' }
Plug 'davidoc/taskpaper.vim',              { 'for': 'taskpaper' }
Plug 'elzr/vim-json',                      { 'for': 'json' }
Plug 'groenewege/vim-less',                { 'for': 'less' }
Plug 'kchmck/vim-coffee-script',           { 'for': 'coffee' }
Plug 'keith/swift.vim',                    { 'for': 'swift' }
Plug 'leafgarland/typescript-vim',         { 'for': 'typescript' }
Plug 'moll/vim-node',                      { 'for': 'javascript'  }
Plug 'mustache/vim-mustache-handlebars',   { 'for': [ 'handlebars', 'mustache' ] }
Plug 'mxw/vim-jsx',                        { 'for': 'javascript' }
Plug 'nelstrom/vim-markdown-folding',      { 'for': 'markdown' }
Plug 'othree/html5.vim',                   { 'for': 'html' }
Plug 'pangloss/vim-javascript',            { 'for': [ 'javascript', 'html' ] }
Plug 'sophacles/vim-processing',           { 'for': 'processing' }
Plug 'sudar/vim-arduino-syntax',           { 'for': 'arduino' }
Plug 'tikhomirov/vim-glsl',                { 'for': 'glsl' }
Plug 'tpope/vim-markdown',                 { 'for': 'markdown' }
Plug 'vim-scripts/ck.vim',                 { 'for': 'ck' }

" smart FZF loading
let g:fzfdir = globpath('/usr/local/Cellar/fzf/', '*', 1, 1)
let g:fzfdir = g:fzfdir + globpath('/usr/share/vim/vimfiles/plugin',' fzf.vim', 1, 1)

if len(g:fzfdir) == 1
  Plug g:fzfdir[0]
endif

call plug#end()

if ($TMUX != '')
  call plug#load('vim-tmux-focus-events')
endif

if has('mac')
  call plug#load('vim-gitgutter')

  if has('nvim')
    call plug#load('neomake', 'nvim-miniyank')
  else
    call plug#load('syntastic')
  endif
endif

" viminfo - more v:oldfiles, register lines
set viminfo='1000,<100,s10,

" encoding
set encoding=utf-8
set fileencodings=utf-8

" yank and paste with system clipboard
set clipboard=unnamed

" watch for file changes
set autoread

" show long lines
set display+=lastline

" redraw only when needed and fast tty
set lazyredraw

" fast tty / timeouts
set notimeout
set ttimeout

if !has('nvim')
  set ttyfast
  set ttyscroll=3
  set ttimeoutlen=10
endif

" more frequent updates
set updatetime=250

" don't beep
set noeb vb t_vb=

" disable startup message
set shortmess+=I

" command window height
set cmdwinheight=3

" syntax coloring
syntax enable

" update syntax highlighting for more lines increased scrolling performance
syntax sync minlines=256

" don't syntax highlight long lines
set synmaxcol=1024

" color theme
set background=dark

" hybrid
colorscheme hybrid

" indentation
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set shiftround
set autoindent
set breakindent

" leader
let mapleader="\<Space>"

" additional settings
set backspace=indent,eol,start
set nonumber
set linebreak
set ruler
set virtualedit=block

set sidescroll=1
set sidescrolloff=6
set scrolloff=3

" path used by gf, :find, etc..
set path=.,,,./**

" don't complete 'included files', speeds things up
set complete-=i

" nice format options
set formatoptions=tcqn21j

" hidden chars style, disabled by default
set nolist
set listchars=tab:▸\ ,trail:∙

" buffers/tabs settings
" set switchbuf=useopen,split
set switchbuf=useopen
set hidden

" no backups or swapfiles, with centralized and persistent undo history
set nobackup
set noswapfile
set undofile
set undodir=~/.vim/undo//

" create undodir if needed
if !isdirectory(&undodir)
  call mkdir(&undodir, "p")
endif

" fix for node fs.watch
set backupcopy=yes

" long history and undo
set history=10000
set undolevels=10000
set undoreload=10000

" search settings
set hlsearch
set ignorecase
set smartcase
set incsearch
set gdefault

" always display statusline
set laststatus=2

" always display tabline
set showtabline=2

" don't show current mode/cmd
set noshowmode
set noshowcmd

" completion in command line
set wildmenu
set wildmode=full

" insert completion height and options
set pumheight=10
set completeopt=menu

" open splits to the right and bottom
set splitright
set splitbelow

" fillchars with nice utf8 vert split, and no fold char
set fillchars=fold:\ ,vert:│

" grep
set grepprg=ag\ --vimgrep\ $*
set grepformat=%f:%l:%c:%m

" set path
if has('mac')
  let $PATH='/usr/local/bin:' . $PATH . ':/Users/Szymon/Documents/Code/Scripts'
endif

" code folding
set foldenable
set foldmethod=syntax
set foldlevelstart=99
set foldcolumn=0

" terminal
if has('nvim')
  tnoremap <esc> <c-\><c-n>
  tnoremap <leader><esc> <esc>
  let g:terminal_scrollback_buffer_size = 5000
endif

" re-source vimrc
nnoremap <leader>sv :ReloadSettings<cr>

" expand %% to directory of current file in command-line mode
cnoremap %% <c-r>=fnameescape(expand('%:~:h'))<cr>/

" tab as %
map <tab> %

" so you can gf to non-existing (new) files
map gf :e <cfile><cr>

" search for currently selected text from visual mode
vnoremap / "vy/<c-r>v<cr>
vnoremap ? "vy?<c-r>v<cr>

" c-a / c-e everywhere
inoremap <c-a> <c-o>0
inoremap <c-e> <c-o>$
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" force proper movement
nnoremap <left>  <nop>
nnoremap <right> <nop>
nnoremap <up>    <nop>
nnoremap <down>  <nop>
inoremap <left>  <nop>
inoremap <right> <nop>
inoremap <up>    <nop>
inoremap <down>  <nop>

" disable EX mode and other accidental q* commands
nnoremap q/ <nop>
nnoremap q: <nop>
nnoremap q? <nop>

" disable man pages
nnoremap K <nop>
xnoremap K <nop>

" apply macros with Q
nnoremap Q @q
xnoremap Q :norm @q<cr>

" key repeat hack for resizing splits
nmap     <c-w>+ <c-w>+<sid>ws
nmap     <c-w>- <c-w>-<sid>ws
nmap     <c-w>> <c-w>><sid>ws
nmap     <c-w>< <c-w><<sid>ws
nnoremap <script> <sid>ws+ <c-w>+<sid>ws
nnoremap <script> <sid>ws- <c-w>-<sid>ws
nnoremap <script> <sid>ws> <c-w>><sid>ws
nnoremap <script> <sid>ws< <c-w><<sid>ws
nmap     <sid>ws <nop>

" move by screen lines using arrow, unless it's with number
nnoremap <expr> k (v:count ? 'k' : 'gk')
nnoremap <expr> j (v:count ? 'j' : 'gj')

" { and } skip over closed folds instead of openning them
nnoremap <expr> } foldclosed(search('^$', 'Wn'))  == -1 ? '}' : '}j}'
nnoremap <expr> { foldclosed(search('^$', 'Wnb')) == -1 ? '{' : '{k{'

" don't move on * and #
nnoremap <silent> * :let star_view=winsaveview()<cr>*:call winrestview(star_view)<cr>
nnoremap <silent> # :let hash_view=winsaveview()<cr>*:call winrestview(hash_view)<cr>

" dont loose selection on indenting
xnoremap > >gv
xnoremap < <gv

" dot works in visual selection mode!
xnoremap . :norm .<cr>

" Y yanks to the end of the line
nnoremap Y y$

" U as redo
nnoremap U <c-r>

" better line begin (H) and end (L)
noremap  H ^
noremap  L $
xnoremap L g_

" split line
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>

" run make
nnoremap R :wa<cr>:silent make!<cr>:redraw!<cr>

" open common files
nnoremap <leader>ov :e ~/.vimrc<cr>
nnoremap <leader>og :e ~/.gvimrc<cr>
nnoremap <leader>oz :e ~/.zshrc<cr>
nnoremap <leader>om :e ~/.tmux.conf<cr>

if has('mac')
  nnoremap <leader>od :e ~/Documents/Dropbox/Notes/drafts.txt<cr>
  nnoremap <leader>ot :e ~/Documents/Dropbox/Tasks/Todo.taskpaper<cr>
  nnoremap <leader>oh :e ~/.hammerspoon/init.lua<cr>
endif

" select in visual mode, star, and don't move unles n/N/...
xnoremap * :<c-u>let star_view=winsaveview()<cr>:<c-u>call VisualSearch('/')<cr>/<c-r>=@/<cr><cr>:call winrestview(star_view)<cr>
xnoremap # :<c-u>let hash_view=winsaveview()<cr>:<c-u>call VisualSearch('?')<cr>?<c-r>=@/<cr><cr>:call winrestview(hash_view)<cr>

" replace current word
nnoremap <leader>r :<c-u>let replace_view=winsaveview()<cr>/\<<c-r><c-w>\><cr>:redraw!<cr>:call winrestview(replace_view)<cr>:%s//
xnoremap <leader>r :<c-u>let replace_view=winsaveview()<cr>:<c-u>call VisualSearch('/')<cr>/<c-r>=@/<cr><cr>:call winrestview(replace_view)<cr>:redraw!<cr>:%s//

" buffers
nnoremap gb         :bnext<cr>
nnoremap gB         :bprev<cr>
nnoremap <leader>bd :bdelete!<cr>
nnoremap <leader>bb :b#<cr>

" new buffer / tab
nnoremap <leader>B :enew<cr>
nnoremap <leader>T :tabnew<cr>

" yank whole buffer
nnoremap <leader>ya :let yank_view=winsaveview()<cr>ggyG<cr>:call winrestview(yank_view)<cr>

" paste from system clipboard
nnoremap <leader>p "+p<cr>

" kill whitespace
nnoremap <silent> <leader>k :KillWhitespace<cr>

" nice grep
nnoremap <leader>G :Grep<cr>
xnoremap <leader>G :GrepVisual<cr>

" clean current search and quickhl
nmap <silent> <leader>c :nohlsearch<cr>:redraw!<cr>
nmap <silent> <leader>C <Plug>(quickhl-manual-reset):nohlsearch<cr>:redraw!<cr>

" aligns
nnoremap <leader>= :let align_view=winsaveview()<cr>=i}<cr>:call winrestview(align_view)<cr>

" folds
nnoremap zf mzzMzv`zzt
nnoremap <leader><leader> za

" zoom window
nnoremap <silent> <c-w>z :ZoomToggle<cr>
